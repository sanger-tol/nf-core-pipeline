// Main settings - normally provided through `nextflow.config`
params {
    // Limit resources so that this can run on GitHub Actions
    max_cpus   = 2
    max_memory = '6.GB'
    max_time   = '6.h'

    // Set default values
    fasta    = null
    outdir   = './results'
    tracedir = "${params.outdir}/pipeline_info"

    // No Conda, only Singularity
    enable_conda = false
}

// Singularity settings - normally provided through `conf/sanger.config`
singularity.enabled    = true
singularity.autoMounts = true
singularity.runOptions = '--bind /lustre --bind /nfs'

// Resource settings - normally provided through `conf/base.config`
process {

    // The following must be copied to your `conf/base.config`
    ///////////////////////////////////////////////////////////////////////////
    /*
    // NOTE: Wrap this with a "withName" clause that catches the sub-workflow name
    // Most of the pipeline requires very little resources
    cpus   = 1
    // but still gradually increase the resources to allow the pipeline to self-heal
    memory = { check_max( 50.MB * task.attempt, 'memory' ) }
    time   = { check_max( 30.min * task.attempt, 'time' ) }
    // NOTE END

    // NOTE: Update the clause to match the sub-workflow and module names
    // samtools dict loads entire sequences in memory
    withName: 'SAMTOOLS_DICT' {
        // 50 MB per 50 Mbp
        memory = { check_max( 50.MB + 50.MB * task.attempt * Math.ceil(meta.max_length / 50000000), 'memory' ) }
    }
    */
    ///////////////////////////////////////////////////////////////////////////
}

// Publishing settings - normally provided through `conf/modules.config`
process {

    // The following must be copied to your `conf/modules.config`
    ///////////////////////////////////////////////////////////////////////////
    // Otherwise the .dict includes paths from Nextflow's work/ directory
    withName: SAMTOOLS_DICT {
        ext.args = { "--uri ${task.publishDir.path[0]}/${fasta.name}.gz" }
    }
    ///////////////////////////////////////////////////////////////////////////

    withName: "PREPARE_FASTA:.*" {
        publishDir = [
            path: params.outdir,
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
